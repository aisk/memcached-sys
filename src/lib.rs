/* automatically generated by rust-bindgen */

extern crate libc;
use libc::*;

#[repr(C)]
#[derive(Copy)]
pub struct Struct_sasl_callback {
    pub id: ::std::os::raw::c_ulong,
    pub _proc: ::std::option::Option<extern "C" fn()
                                         -> ::std::os::raw::c_int>,
    pub context: *mut ::std::os::raw::c_void,
}
impl ::std::clone::Clone for Struct_sasl_callback {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sasl_callback {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type sasl_callback_t = Struct_sasl_callback;

pub type memcached_socket_t = ::std::os::raw::c_int;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_memcached_behavior_t {
    MEMCACHED_BEHAVIOR_NO_BLOCK = 0,
    MEMCACHED_BEHAVIOR_TCP_NODELAY = 1,
    MEMCACHED_BEHAVIOR_HASH = 2,
    MEMCACHED_BEHAVIOR_KETAMA = 3,
    MEMCACHED_BEHAVIOR_SOCKET_SEND_SIZE = 4,
    MEMCACHED_BEHAVIOR_SOCKET_RECV_SIZE = 5,
    MEMCACHED_BEHAVIOR_CACHE_LOOKUPS = 6,
    MEMCACHED_BEHAVIOR_SUPPORT_CAS = 7,
    MEMCACHED_BEHAVIOR_POLL_TIMEOUT = 8,
    MEMCACHED_BEHAVIOR_DISTRIBUTION = 9,
    MEMCACHED_BEHAVIOR_BUFFER_REQUESTS = 10,
    MEMCACHED_BEHAVIOR_USER_DATA = 11,
    MEMCACHED_BEHAVIOR_SORT_HOSTS = 12,
    MEMCACHED_BEHAVIOR_VERIFY_KEY = 13,
    MEMCACHED_BEHAVIOR_CONNECT_TIMEOUT = 14,
    MEMCACHED_BEHAVIOR_RETRY_TIMEOUT = 15,
    MEMCACHED_BEHAVIOR_KETAMA_WEIGHTED = 16,
    MEMCACHED_BEHAVIOR_KETAMA_HASH = 17,
    MEMCACHED_BEHAVIOR_BINARY_PROTOCOL = 18,
    MEMCACHED_BEHAVIOR_SND_TIMEOUT = 19,
    MEMCACHED_BEHAVIOR_RCV_TIMEOUT = 20,
    MEMCACHED_BEHAVIOR_SERVER_FAILURE_LIMIT = 21,
    MEMCACHED_BEHAVIOR_IO_MSG_WATERMARK = 22,
    MEMCACHED_BEHAVIOR_IO_BYTES_WATERMARK = 23,
    MEMCACHED_BEHAVIOR_IO_KEY_PREFETCH = 24,
    MEMCACHED_BEHAVIOR_HASH_WITH_PREFIX_KEY = 25,
    MEMCACHED_BEHAVIOR_NOREPLY = 26,
    MEMCACHED_BEHAVIOR_USE_UDP = 27,
    MEMCACHED_BEHAVIOR_AUTO_EJECT_HOSTS = 28,
    MEMCACHED_BEHAVIOR_NUMBER_OF_REPLICAS = 29,
    MEMCACHED_BEHAVIOR_RANDOMIZE_REPLICA_READ = 30,
    MEMCACHED_BEHAVIOR_CORK = 31,
    MEMCACHED_BEHAVIOR_TCP_KEEPALIVE = 32,
    MEMCACHED_BEHAVIOR_TCP_KEEPIDLE = 33,
    MEMCACHED_BEHAVIOR_LOAD_FROM_FILE = 34,
    MEMCACHED_BEHAVIOR_REMOVE_FAILED_SERVERS = 35,
    MEMCACHED_BEHAVIOR_DEAD_TIMEOUT = 36,
    MEMCACHED_BEHAVIOR_SERVER_TIMEOUT_LIMIT = 37,
    MEMCACHED_BEHAVIOR_MAX = 38,
}
pub type memcached_behavior_t = Enum_memcached_behavior_t;
pub const MEMCACHED_CALLBACK_NAMESPACE: Enum_memcached_callback_t =
    Enum_memcached_callback_t::MEMCACHED_CALLBACK_PREFIX_KEY;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_memcached_callback_t {
    MEMCACHED_CALLBACK_PREFIX_KEY = 0,
    MEMCACHED_CALLBACK_USER_DATA = 1,
    MEMCACHED_CALLBACK_CLEANUP_FUNCTION = 2,
    MEMCACHED_CALLBACK_CLONE_FUNCTION = 3,
    MEMCACHED_CALLBACK_GET_FAILURE = 7,
    MEMCACHED_CALLBACK_DELETE_TRIGGER = 8,
    MEMCACHED_CALLBACK_MAX = 9,
}
pub type memcached_callback_t = Enum_memcached_callback_t;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_memcached_connection_t {
    MEMCACHED_CONNECTION_TCP = 0,
    MEMCACHED_CONNECTION_UDP = 1,
    MEMCACHED_CONNECTION_UNIX_SOCKET = 2,
}
pub type memcached_connection_t = Enum_memcached_connection_t;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_memcached_hash_t {
    MEMCACHED_HASH_DEFAULT = 0,
    MEMCACHED_HASH_MD5 = 1,
    MEMCACHED_HASH_CRC = 2,
    MEMCACHED_HASH_FNV1_64 = 3,
    MEMCACHED_HASH_FNV1A_64 = 4,
    MEMCACHED_HASH_FNV1_32 = 5,
    MEMCACHED_HASH_FNV1A_32 = 6,
    MEMCACHED_HASH_HSIEH = 7,
    MEMCACHED_HASH_MURMUR = 8,
    MEMCACHED_HASH_JENKINS = 9,
    MEMCACHED_HASH_MURMUR3 = 10,
    MEMCACHED_HASH_CUSTOM = 11,
    MEMCACHED_HASH_MAX = 12,
}
pub type memcached_hash_t = Enum_memcached_hash_t;
pub const MEMCACHED_CONNECTION_SOCKET_CREATE_FAILURE: Enum_memcached_return_t
          =
    Enum_memcached_return_t::MEMCACHED_ERROR;
#[derive(Clone, Copy, Debug)]
#[repr(u32)]
pub enum Enum_memcached_return_t {
    MEMCACHED_SUCCESS = 0,
    MEMCACHED_FAILURE = 1,
    MEMCACHED_HOST_LOOKUP_FAILURE = 2,
    MEMCACHED_CONNECTION_FAILURE = 3,
    MEMCACHED_CONNECTION_BIND_FAILURE = 4,
    MEMCACHED_WRITE_FAILURE = 5,
    MEMCACHED_READ_FAILURE = 6,
    MEMCACHED_UNKNOWN_READ_FAILURE = 7,
    MEMCACHED_PROTOCOL_ERROR = 8,
    MEMCACHED_CLIENT_ERROR = 9,
    MEMCACHED_SERVER_ERROR = 10,
    MEMCACHED_ERROR = 11,
    MEMCACHED_DATA_EXISTS = 12,
    MEMCACHED_DATA_DOES_NOT_EXIST = 13,
    MEMCACHED_NOTSTORED = 14,
    MEMCACHED_STORED = 15,
    MEMCACHED_NOTFOUND = 16,
    MEMCACHED_MEMORY_ALLOCATION_FAILURE = 17,
    MEMCACHED_PARTIAL_READ = 18,
    MEMCACHED_SOME_ERRORS = 19,
    MEMCACHED_NO_SERVERS = 20,
    MEMCACHED_END = 21,
    MEMCACHED_DELETED = 22,
    MEMCACHED_VALUE = 23,
    MEMCACHED_STAT = 24,
    MEMCACHED_ITEM = 25,
    MEMCACHED_ERRNO = 26,
    MEMCACHED_FAIL_UNIX_SOCKET = 27,
    MEMCACHED_NOT_SUPPORTED = 28,
    MEMCACHED_NO_KEY_PROVIDED = 29,
    MEMCACHED_FETCH_NOTFINISHED = 30,
    MEMCACHED_TIMEOUT = 31,
    MEMCACHED_BUFFERED = 32,
    MEMCACHED_BAD_KEY_PROVIDED = 33,
    MEMCACHED_INVALID_HOST_PROTOCOL = 34,
    MEMCACHED_SERVER_MARKED_DEAD = 35,
    MEMCACHED_UNKNOWN_STAT_KEY = 36,
    MEMCACHED_E2BIG = 37,
    MEMCACHED_INVALID_ARGUMENTS = 38,
    MEMCACHED_KEY_TOO_BIG = 39,
    MEMCACHED_AUTH_PROBLEM = 40,
    MEMCACHED_AUTH_FAILURE = 41,
    MEMCACHED_AUTH_CONTINUE = 42,
    MEMCACHED_PARSE_ERROR = 43,
    MEMCACHED_PARSE_USER_ERROR = 44,
    MEMCACHED_DEPRECATED = 45,
    MEMCACHED_IN_PROGRESS = 46,
    MEMCACHED_SERVER_TEMPORARILY_DISABLED = 47,
    MEMCACHED_SERVER_MEMORY_ALLOCATION_FAILURE = 48,
    MEMCACHED_MAXIMUM_RETURN = 49,
}
pub type memcached_return_t = Enum_memcached_return_t;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_memcached_server_distribution_t {
    MEMCACHED_DISTRIBUTION_MODULA = 0,
    MEMCACHED_DISTRIBUTION_CONSISTENT = 1,
    MEMCACHED_DISTRIBUTION_CONSISTENT_KETAMA = 2,
    MEMCACHED_DISTRIBUTION_RANDOM = 3,
    MEMCACHED_DISTRIBUTION_CONSISTENT_KETAMA_SPY = 4,
    MEMCACHED_DISTRIBUTION_CONSISTENT_WEIGHTED = 5,
    MEMCACHED_DISTRIBUTION_VIRTUAL_BUCKET = 6,
    MEMCACHED_DISTRIBUTION_CONSISTENT_MAX = 7,
}
pub type memcached_server_distribution_t =
    Enum_memcached_server_distribution_t;
pub type memcached_st = Struct_memcached_st;
pub type memcached_stat_st = Struct_memcached_stat_st;
pub type memcached_analysis_st = Struct_memcached_analysis_st;
pub type memcached_result_st = Struct_memcached_result_st;
pub enum Struct_memcached_array_st { }
pub type memcached_array_st = Struct_memcached_array_st;
pub enum Struct_memcached_error_t { }
pub type memcached_error_t = Struct_memcached_error_t;
pub type memcached_server_st = Struct_memcached_server_st;
pub enum Struct_memcached_instance_st { }
pub type memcached_instance_st = Struct_memcached_instance_st;
pub type memcached_server_list_st = *mut Struct_memcached_server_st;
pub type memcached_callback_st = Struct_memcached_callback_st;
pub type memcached_string_st = Struct_memcached_string_st;
pub type memcached_string_t = Struct_memcached_string_t;
pub type memcached_execute_fn =
    ::std::option::Option<unsafe extern "C" fn(ptr: *const memcached_st,
                                               result:
                                                   *mut memcached_result_st,
                                               context:
                                                   *mut ::std::os::raw::c_void)
                              -> memcached_return_t>;
pub type memcached_server_fn =
    ::std::option::Option<unsafe extern "C" fn(ptr: *const memcached_st,
                                               server:
                                                   *const memcached_instance_st,
                                               context:
                                                   *mut ::std::os::raw::c_void)
                              -> memcached_return_t>;
pub type memcached_stat_fn =
    ::std::option::Option<unsafe extern "C" fn(server:
                                                   *const memcached_instance_st,
                                               key:
                                                   *const ::std::os::raw::c_char,
                                               key_length: size_t,
                                               value:
                                                   *const ::std::os::raw::c_char,
                                               value_length: size_t,
                                               context:
                                                   *mut ::std::os::raw::c_void)
                              -> memcached_return_t>;
pub type memcached_free_fn =
    ::std::option::Option<unsafe extern "C" fn(ptr: *const memcached_st,
                                               mem:
                                                   *mut ::std::os::raw::c_void,
                                               context:
                                                   *mut ::std::os::raw::c_void)>;
pub type memcached_malloc_fn =
    ::std::option::Option<unsafe extern "C" fn(ptr: *const memcached_st,
                                               size: size_t,
                                               context:
                                                   *mut ::std::os::raw::c_void)
                              -> *mut ::std::os::raw::c_void>;
pub type memcached_realloc_fn =
    ::std::option::Option<unsafe extern "C" fn(ptr: *const memcached_st,
                                               mem:
                                                   *mut ::std::os::raw::c_void,
                                               size: size_t,
                                               context:
                                                   *mut ::std::os::raw::c_void)
                              -> *mut ::std::os::raw::c_void>;
pub type memcached_calloc_fn =
    ::std::option::Option<unsafe extern "C" fn(ptr: *const memcached_st,
                                               nelem: size_t, elsize: size_t,
                                               context:
                                                   *mut ::std::os::raw::c_void)
                              -> *mut ::std::os::raw::c_void>;
pub type memcached_clone_fn =
    ::std::option::Option<unsafe extern "C" fn(destination: *mut memcached_st,
                                               source: *const memcached_st)
                              -> memcached_return_t>;
pub type memcached_cleanup_fn =
    ::std::option::Option<unsafe extern "C" fn(ptr: *const memcached_st)
                              -> memcached_return_t>;
pub type memcached_trigger_key_fn =
    ::std::option::Option<unsafe extern "C" fn(ptr: *const memcached_st,
                                               key:
                                                   *const ::std::os::raw::c_char,
                                               key_length: size_t,
                                               result:
                                                   *mut memcached_result_st)
                              -> memcached_return_t>;
pub type memcached_trigger_delete_key_fn =
    ::std::option::Option<unsafe extern "C" fn(ptr: *const memcached_st,
                                               key:
                                                   *const ::std::os::raw::c_char,
                                               key_length: size_t)
                              -> memcached_return_t>;
pub type memcached_dump_fn =
    ::std::option::Option<unsafe extern "C" fn(ptr: *const memcached_st,
                                               key:
                                                   *const ::std::os::raw::c_char,
                                               key_length: size_t,
                                               context:
                                                   *mut ::std::os::raw::c_void)
                              -> memcached_return_t>;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed1 {
    HASHKIT_SUCCESS = 0,
    HASHKIT_FAILURE = 1,
    HASHKIT_MEMORY_ALLOCATION_FAILURE = 2,
    HASHKIT_INVALID_HASH = 3,
    HASHKIT_INVALID_ARGUMENT = 4,
    HASHKIT_MAXIMUM_RETURN = 5,
}
pub type hashkit_return_t = Enum_Unnamed1;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed2 {
    HASHKIT_HASH_DEFAULT = 0,
    HASHKIT_HASH_MD5 = 1,
    HASHKIT_HASH_CRC = 2,
    HASHKIT_HASH_FNV1_64 = 3,
    HASHKIT_HASH_FNV1A_64 = 4,
    HASHKIT_HASH_FNV1_32 = 5,
    HASHKIT_HASH_FNV1A_32 = 6,
    HASHKIT_HASH_HSIEH = 7,
    HASHKIT_HASH_MURMUR = 8,
    HASHKIT_HASH_JENKINS = 9,
    HASHKIT_HASH_MURMUR3 = 10,
    HASHKIT_HASH_CUSTOM = 11,
    HASHKIT_HASH_MAX = 12,
}
pub type hashkit_hash_algorithm_t = Enum_Unnamed2;
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_Unnamed3 {
    HASHKIT_DISTRIBUTION_MODULA = 0,
    HASHKIT_DISTRIBUTION_RANDOM = 1,
    HASHKIT_DISTRIBUTION_KETAMA = 2,
    HASHKIT_DISTRIBUTION_MAX = 3,
}
pub type hashkit_distribution_t = Enum_Unnamed3;
pub type hashkit_st = Struct_hashkit_st;
pub enum Struct_hashkit_string_st { }
pub type hashkit_string_st = Struct_hashkit_string_st;
pub type hashkit_hash_fn =
    ::std::option::Option<unsafe extern "C" fn(key:
                                                   *const ::std::os::raw::c_char,
                                               key_length: size_t,
                                               context:
                                                   *mut ::std::os::raw::c_void)
                              -> uint32_t>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_hashkit_st {
    pub base_hash: Struct_hashkit_function_st,
    pub distribution_hash: Struct_hashkit_function_st,
    pub flags: Struct_Unnamed4,
    pub options: Struct_Unnamed5,
    pub _key: *mut ::std::os::raw::c_void,
}
impl ::std::clone::Clone for Struct_hashkit_st {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_hashkit_st {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_hashkit_function_st {
    pub function: hashkit_hash_fn,
    pub context: *mut ::std::os::raw::c_void,
}
impl ::std::clone::Clone for Struct_hashkit_function_st {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_hashkit_function_st {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed4 {
    pub _bindgen_bitfield_1_: u8,
}
impl ::std::clone::Clone for Struct_Unnamed4 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed4 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed5 {
    pub _bindgen_bitfield_1_: u8,
}
impl ::std::clone::Clone for Struct_Unnamed5 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed5 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_memcached_callback_st {
    pub callback: *mut memcached_execute_fn,
    pub context: *mut ::std::os::raw::c_void,
    pub number_of_callback: uint32_t,
}
impl ::std::clone::Clone for Struct_memcached_callback_st {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_memcached_callback_st {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_memcached_string_st {
    pub end: *mut ::std::os::raw::c_char,
    pub string: *mut ::std::os::raw::c_char,
    pub current_size: size_t,
    pub root: *mut Struct_memcached_st,
    pub options: Struct_Unnamed6,
}
impl ::std::clone::Clone for Struct_memcached_string_st {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_memcached_string_st {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed6 {
    pub _bindgen_bitfield_1_: u8,
}
impl ::std::clone::Clone for Struct_Unnamed6 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed6 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_memcached_result_st {
    pub item_flags: uint32_t,
    pub item_expiration: time_t,
    pub key_length: size_t,
    pub item_cas: uint64_t,
    pub root: *mut Struct_memcached_st,
    pub value: memcached_string_st,
    pub numeric_value: uint64_t,
    pub count: uint64_t,
    pub item_key: [::std::os::raw::c_char; 251usize],
    pub options: Struct_Unnamed7,
}
impl ::std::clone::Clone for Struct_memcached_result_st {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_memcached_result_st {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed7 {
    pub _bindgen_bitfield_1_: u8,
}
impl ::std::clone::Clone for Struct_Unnamed7 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed7 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_memcached_allocator_t {
    pub calloc: memcached_calloc_fn,
    pub free: memcached_free_fn,
    pub malloc: memcached_malloc_fn,
    pub realloc: memcached_realloc_fn,
    pub context: *mut ::std::os::raw::c_void,
}
impl ::std::clone::Clone for Struct_memcached_allocator_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_memcached_allocator_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_memcached_sasl_st {
    pub callbacks: *mut sasl_callback_t,
    pub is_allocated: u8,
}
impl ::std::clone::Clone for Struct_memcached_sasl_st {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_memcached_sasl_st {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum Struct_memcached_continuum_item_st { }
pub enum Struct_memcached_virtual_bucket_t { }
#[repr(C)]
#[derive(Copy)]
pub struct Struct_memcached_st {
    pub state: Struct_Unnamed8,
    pub flags: Struct_Unnamed9,
    pub distribution: memcached_server_distribution_t,
    pub hashkit: hashkit_st,
    pub server_info: Struct_Unnamed10,
    pub number_of_hosts: uint32_t,
    pub servers: *mut memcached_instance_st,
    pub last_disconnected_server: *mut memcached_instance_st,
    pub snd_timeout: int32_t,
    pub rcv_timeout: int32_t,
    pub server_failure_limit: uint32_t,
    pub server_timeout_limit: uint32_t,
    pub io_msg_watermark: uint32_t,
    pub io_bytes_watermark: uint32_t,
    pub io_key_prefetch: uint32_t,
    pub tcp_keepidle: uint32_t,
    pub poll_timeout: int32_t,
    pub connect_timeout: int32_t,
    pub retry_timeout: int32_t,
    pub dead_timeout: int32_t,
    pub send_size: ::std::os::raw::c_int,
    pub recv_size: ::std::os::raw::c_int,
    pub user_data: *mut ::std::os::raw::c_void,
    pub query_id: uint64_t,
    pub number_of_replicas: uint32_t,
    pub result: memcached_result_st,
    pub ketama: Struct_Unnamed11,
    pub virtual_bucket: *mut Struct_memcached_virtual_bucket_t,
    pub allocators: Struct_memcached_allocator_t,
    pub on_clone: memcached_clone_fn,
    pub on_cleanup: memcached_cleanup_fn,
    pub get_key_failure: memcached_trigger_key_fn,
    pub delete_trigger: memcached_trigger_delete_key_fn,
    pub callbacks: *mut memcached_callback_st,
    pub sasl: Struct_memcached_sasl_st,
    pub error_messages: *mut Struct_memcached_error_t,
    pub _namespace: *mut Struct_memcached_array_st,
    pub configure: Struct_Unnamed12,
    pub options: Struct_Unnamed13,
}
impl ::std::clone::Clone for Struct_memcached_st {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_memcached_st {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed8 {
    pub _bindgen_bitfield_1_: u8,
}
impl ::std::clone::Clone for Struct_Unnamed8 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed8 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed9 {
    pub _bindgen_bitfield_1_: u8,
    pub _bindgen_bitfield_2_: u8,
}
impl ::std::clone::Clone for Struct_Unnamed9 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed9 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed10 {
    pub version: ::std::os::raw::c_uint,
}
impl ::std::clone::Clone for Struct_Unnamed10 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed10 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed11 {
    pub weighted_: u8,
    pub continuum_count: uint32_t,
    pub continuum_points_counter: uint32_t,
    pub next_distribution_rebuild: time_t,
    pub continuum: *mut Struct_memcached_continuum_item_st,
}
impl ::std::clone::Clone for Struct_Unnamed11 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed11 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed12 {
    pub initial_pool_size: uint32_t,
    pub max_pool_size: uint32_t,
    pub version: int32_t,
    pub filename: *mut Struct_memcached_array_st,
}
impl ::std::clone::Clone for Struct_Unnamed12 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed12 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed13 {
    pub _bindgen_bitfield_1_: u8,
}
impl ::std::clone::Clone for Struct_Unnamed13 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed13 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Clone, Copy)]
#[repr(u32)]
pub enum Enum_memcached_server_state_t {
    MEMCACHED_SERVER_STATE_NEW = 0,
    MEMCACHED_SERVER_STATE_ADDRINFO = 1,
    MEMCACHED_SERVER_STATE_IN_PROGRESS = 2,
    MEMCACHED_SERVER_STATE_CONNECTED = 3,
    MEMCACHED_SERVER_STATE_IN_TIMEOUT = 4,
    MEMCACHED_SERVER_STATE_DISABLED = 5,
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_memcached_server_st {
    pub options: Struct_Unnamed14,
    pub number_of_hosts: uint32_t,
    pub cursor_active: uint32_t,
    pub port: in_port_t,
    pub io_bytes_sent: uint32_t,
    pub request_id: uint32_t,
    pub server_failure_counter: uint32_t,
    pub server_failure_counter_query_id: uint64_t,
    pub server_timeout_counter: uint32_t,
    pub server_timeout_counter_query_id: uint64_t,
    pub weight: uint32_t,
    pub version: uint32_t,
    pub state: Enum_memcached_server_state_t,
    pub io_wait_count: Struct_Unnamed15,
    pub major_version: uint8_t,
    pub micro_version: uint8_t,
    pub minor_version: uint8_t,
    pub _type: memcached_connection_t,
    pub next_retry: time_t,
    pub root: *mut Struct_memcached_st,
    pub limit_maxbytes: uint64_t,
    pub error_messages: *mut Struct_memcached_error_t,
    pub hostname: [::std::os::raw::c_char; 1025usize],
}
impl ::std::clone::Clone for Struct_memcached_server_st {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_memcached_server_st {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed14 {
    pub _bindgen_bitfield_1_: u8,
}
impl ::std::clone::Clone for Struct_Unnamed14 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed14 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed15 {
    pub read: uint32_t,
    pub write: uint32_t,
    pub timeouts: uint32_t,
    pub _bytes_read: size_t,
}
impl ::std::clone::Clone for Struct_Unnamed15 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed15 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_memcached_stat_st {
    pub connection_structures: ::std::os::raw::c_ulong,
    pub curr_connections: ::std::os::raw::c_ulong,
    pub curr_items: ::std::os::raw::c_ulong,
    pub pid: pid_t,
    pub pointer_size: ::std::os::raw::c_ulong,
    pub rusage_system_microseconds: ::std::os::raw::c_ulong,
    pub rusage_system_seconds: ::std::os::raw::c_ulong,
    pub rusage_user_microseconds: ::std::os::raw::c_ulong,
    pub rusage_user_seconds: ::std::os::raw::c_ulong,
    pub threads: ::std::os::raw::c_ulong,
    pub time: ::std::os::raw::c_ulong,
    pub total_connections: ::std::os::raw::c_ulong,
    pub total_items: ::std::os::raw::c_ulong,
    pub uptime: ::std::os::raw::c_ulong,
    pub bytes: ::std::os::raw::c_ulonglong,
    pub bytes_read: ::std::os::raw::c_ulonglong,
    pub bytes_written: ::std::os::raw::c_ulonglong,
    pub cmd_get: ::std::os::raw::c_ulonglong,
    pub cmd_set: ::std::os::raw::c_ulonglong,
    pub evictions: ::std::os::raw::c_ulonglong,
    pub get_hits: ::std::os::raw::c_ulonglong,
    pub get_misses: ::std::os::raw::c_ulonglong,
    pub limit_maxbytes: ::std::os::raw::c_ulonglong,
    pub version: [::std::os::raw::c_char; 24usize],
    pub __future: *mut ::std::os::raw::c_void,
    pub root: *mut memcached_st,
}
impl ::std::clone::Clone for Struct_memcached_stat_st {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_memcached_stat_st {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_memcached_string_t {
    pub c_str: *const ::std::os::raw::c_char,
    pub size: size_t,
}
impl ::std::clone::Clone for Struct_memcached_string_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_memcached_string_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_memcached_analysis_st {
    pub root: *mut memcached_st,
    pub average_item_size: uint32_t,
    pub longest_uptime: uint32_t,
    pub least_free_server: uint32_t,
    pub most_consumed_server: uint32_t,
    pub oldest_server: uint32_t,
    pub pool_hit_ratio: ::std::os::raw::c_double,
    pub most_used_bytes: uint64_t,
    pub least_remaining_bytes: uint64_t,
}
impl ::std::clone::Clone for Struct_memcached_analysis_st {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_memcached_analysis_st {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type memcached_return = memcached_return_t;
pub type memcached_server_distribution = memcached_server_distribution_t;
pub type memcached_behavior = memcached_behavior_t;
pub type memcached_callback = memcached_callback_t;
pub type memcached_hash = memcached_hash_t;
pub type memcached_connection = memcached_connection_t;
pub type memcached_clone_func = memcached_clone_fn;
pub type memcached_cleanup_func = memcached_cleanup_fn;
pub type memcached_execute_function = memcached_execute_fn;
pub type memcached_server_function = memcached_server_fn;
pub type memcached_trigger_key = memcached_trigger_key_fn;
pub type memcached_trigger_delete_key = memcached_trigger_delete_key_fn;
pub type memcached_dump_func = memcached_dump_fn;
pub type memcached_server_instance_st = *mut memcached_instance_st;
#[link(name = "memcached")]
#[link(name = "hashkit")]
extern "C" {
    pub fn libhashkit_has_algorithm(arg1: hashkit_hash_algorithm_t) -> u8;
    pub fn libhashkit_one_at_a_time(key: *const ::std::os::raw::c_char,
                                    key_length: size_t) -> uint32_t;
    pub fn libhashkit_fnv1_64(key: *const ::std::os::raw::c_char,
                              key_length: size_t) -> uint32_t;
    pub fn libhashkit_fnv1a_64(key: *const ::std::os::raw::c_char,
                               key_length: size_t) -> uint32_t;
    pub fn libhashkit_fnv1_32(key: *const ::std::os::raw::c_char,
                              key_length: size_t) -> uint32_t;
    pub fn libhashkit_fnv1a_32(key: *const ::std::os::raw::c_char,
                               key_length: size_t) -> uint32_t;
    pub fn libhashkit_crc32(key: *const ::std::os::raw::c_char,
                            key_length: size_t) -> uint32_t;
    pub fn libhashkit_hsieh(key: *const ::std::os::raw::c_char,
                            key_length: size_t) -> uint32_t;
    pub fn libhashkit_murmur(key: *const ::std::os::raw::c_char,
                             key_length: size_t) -> uint32_t;
    pub fn libhashkit_murmur3(key: *const ::std::os::raw::c_char,
                              key_length: size_t) -> uint32_t;
    pub fn libhashkit_jenkins(key: *const ::std::os::raw::c_char,
                              key_length: size_t) -> uint32_t;
    pub fn libhashkit_md5(key: *const ::std::os::raw::c_char,
                          key_length: size_t) -> uint32_t;
    pub fn libhashkit_md5_signature(key: *const ::std::os::raw::c_uchar,
                                    length: size_t,
                                    result: *mut ::std::os::raw::c_uchar);
    pub fn hashkit_digest(_self: *const hashkit_st,
                          key: *const ::std::os::raw::c_char,
                          key_length: size_t) -> uint32_t;
    pub fn libhashkit_digest(key: *const ::std::os::raw::c_char,
                             key_length: size_t,
                             hash_algorithm: hashkit_hash_algorithm_t)
     -> uint32_t;
    pub fn hashkit_set_function(hash: *mut hashkit_st,
                                hash_algorithm: hashkit_hash_algorithm_t)
     -> hashkit_return_t;
    pub fn hashkit_set_custom_function(hash: *mut hashkit_st,
                                       function: hashkit_hash_fn,
                                       context: *mut ::std::os::raw::c_void)
     -> hashkit_return_t;
    pub fn hashkit_get_function(hash: *const hashkit_st)
     -> hashkit_hash_algorithm_t;
    pub fn hashkit_set_distribution_function(hash: *mut hashkit_st,
                                             hash_algorithm:
                                                 hashkit_hash_algorithm_t)
     -> hashkit_return_t;
    pub fn hashkit_set_custom_distribution_function(_self: *mut hashkit_st,
                                                    function: hashkit_hash_fn,
                                                    context:
                                                        *mut ::std::os::raw::c_void)
     -> hashkit_return_t;
    pub fn hashkit_get_distribution_function(_self: *const hashkit_st)
     -> hashkit_hash_algorithm_t;
    pub fn libhashkit_string_hash(_type: hashkit_hash_algorithm_t)
     -> *const ::std::os::raw::c_char;
    pub fn hashkit_strerror(ptr: *mut hashkit_st, rc: hashkit_return_t)
     -> *const ::std::os::raw::c_char;
    pub fn hashkit_string_free(ptr: *mut hashkit_string_st);
    pub fn hashkit_string_length(_self: *const hashkit_string_st) -> size_t;
    pub fn hashkit_string_c_str(_self: *const hashkit_string_st)
     -> *const ::std::os::raw::c_char;
    pub fn hashkit_create(hash: *mut hashkit_st) -> *mut hashkit_st;
    pub fn hashkit_clone(destination: *mut hashkit_st, ptr: *const hashkit_st)
     -> *mut hashkit_st;
    pub fn hashkit_compare(first: *const hashkit_st,
                           second: *const hashkit_st) -> u8;
    pub fn hashkit_free(hash: *mut hashkit_st);
    pub fn hashkit_encrypt(arg1: *mut hashkit_st,
                           source: *const ::std::os::raw::c_char,
                           source_length: size_t) -> *mut hashkit_string_st;
    pub fn hashkit_decrypt(arg1: *mut hashkit_st,
                           source: *const ::std::os::raw::c_char,
                           source_length: size_t) -> *mut hashkit_string_st;
    pub fn hashkit_key(arg1: *mut hashkit_st,
                       key: *const ::std::os::raw::c_char, key_length: size_t)
     -> u8;
    pub fn memcached_error(arg1: *const memcached_st)
     -> *const ::std::os::raw::c_char;
    pub fn memcached_last_error_message(arg1: *const memcached_st)
     -> *const ::std::os::raw::c_char;
    pub fn memcached_error_print(arg1: *const memcached_st);
    pub fn memcached_last_error(arg1: *const memcached_st)
     -> memcached_return_t;
    pub fn memcached_last_error_errno(arg1: *const memcached_st)
     -> ::std::os::raw::c_int;
    pub fn memcached_server_error(ptr: *const memcached_instance_st)
     -> *const ::std::os::raw::c_char;
    pub fn memcached_server_error_return(ptr: *const memcached_instance_st)
     -> memcached_return_t;
    pub fn memcached_stat_free(arg1: *const memcached_st,
                               arg2: *mut memcached_stat_st);
    pub fn memcached_stat(ptr: *mut memcached_st,
                          args: *mut ::std::os::raw::c_char,
                          error: *mut memcached_return_t)
     -> *mut memcached_stat_st;
    pub fn memcached_stat_servername(memc_stat: *mut memcached_stat_st,
                                     args: *mut ::std::os::raw::c_char,
                                     hostname: *const ::std::os::raw::c_char,
                                     port: in_port_t) -> memcached_return_t;
    pub fn memcached_stat_get_value(ptr: *const memcached_st,
                                    memc_stat: *mut memcached_stat_st,
                                    key: *const ::std::os::raw::c_char,
                                    error: *mut memcached_return_t)
     -> *mut ::std::os::raw::c_char;
    pub fn memcached_stat_get_keys(ptr: *mut memcached_st,
                                   memc_stat: *mut memcached_stat_st,
                                   error: *mut memcached_return_t)
     -> *mut *mut ::std::os::raw::c_char;
    pub fn memcached_stat_execute(memc: *mut memcached_st,
                                  args: *const ::std::os::raw::c_char,
                                  func: memcached_stat_fn,
                                  context: *mut ::std::os::raw::c_void)
     -> memcached_return_t;
    pub fn memcached_set_memory_allocators(ptr: *mut memcached_st,
                                           mem_malloc: memcached_malloc_fn,
                                           mem_free: memcached_free_fn,
                                           mem_realloc: memcached_realloc_fn,
                                           mem_calloc: memcached_calloc_fn,
                                           context:
                                               *mut ::std::os::raw::c_void)
     -> memcached_return_t;
    pub fn memcached_get_memory_allocators(ptr: *const memcached_st,
                                           mem_malloc:
                                               *mut memcached_malloc_fn,
                                           mem_free: *mut memcached_free_fn,
                                           mem_realloc:
                                               *mut memcached_realloc_fn,
                                           mem_calloc:
                                               *mut memcached_calloc_fn);
    pub fn memcached_get_memory_allocators_context(ptr: *const memcached_st)
     -> *mut ::std::os::raw::c_void;
    pub fn memcached_analyze(memc: *mut memcached_st,
                             memc_stat: *mut memcached_stat_st,
                             error: *mut memcached_return_t)
     -> *mut memcached_analysis_st;
    pub fn memcached_analyze_free(arg1: *mut memcached_analysis_st);
    pub fn memcached_increment(ptr: *mut memcached_st,
                               key: *const ::std::os::raw::c_char,
                               key_length: size_t, offset: uint32_t,
                               value: *mut uint64_t) -> memcached_return_t;
    pub fn memcached_decrement(ptr: *mut memcached_st,
                               key: *const ::std::os::raw::c_char,
                               key_length: size_t, offset: uint32_t,
                               value: *mut uint64_t) -> memcached_return_t;
    pub fn memcached_increment_by_key(ptr: *mut memcached_st,
                                      group_key:
                                          *const ::std::os::raw::c_char,
                                      group_key_length: size_t,
                                      key: *const ::std::os::raw::c_char,
                                      key_length: size_t, offset: uint64_t,
                                      value: *mut uint64_t)
     -> memcached_return_t;
    pub fn memcached_decrement_by_key(ptr: *mut memcached_st,
                                      group_key:
                                          *const ::std::os::raw::c_char,
                                      group_key_length: size_t,
                                      key: *const ::std::os::raw::c_char,
                                      key_length: size_t, offset: uint64_t,
                                      value: *mut uint64_t)
     -> memcached_return_t;
    pub fn memcached_increment_with_initial(ptr: *mut memcached_st,
                                            key:
                                                *const ::std::os::raw::c_char,
                                            key_length: size_t,
                                            offset: uint64_t,
                                            initial: uint64_t,
                                            expiration: time_t,
                                            value: *mut uint64_t)
     -> memcached_return_t;
    pub fn memcached_decrement_with_initial(ptr: *mut memcached_st,
                                            key:
                                                *const ::std::os::raw::c_char,
                                            key_length: size_t,
                                            offset: uint64_t,
                                            initial: uint64_t,
                                            expiration: time_t,
                                            value: *mut uint64_t)
     -> memcached_return_t;
    pub fn memcached_increment_with_initial_by_key(ptr: *mut memcached_st,
                                                   group_key:
                                                       *const ::std::os::raw::c_char,
                                                   group_key_length: size_t,
                                                   key:
                                                       *const ::std::os::raw::c_char,
                                                   key_length: size_t,
                                                   offset: uint64_t,
                                                   initial: uint64_t,
                                                   expiration: time_t,
                                                   value: *mut uint64_t)
     -> memcached_return_t;
    pub fn memcached_decrement_with_initial_by_key(ptr: *mut memcached_st,
                                                   group_key:
                                                       *const ::std::os::raw::c_char,
                                                   group_key_length: size_t,
                                                   key:
                                                       *const ::std::os::raw::c_char,
                                                   key_length: size_t,
                                                   offset: uint64_t,
                                                   initial: uint64_t,
                                                   expiration: time_t,
                                                   value: *mut uint64_t)
     -> memcached_return_t;
    pub fn memcached_behavior_set(ptr: *mut memcached_st,
                                  flag: memcached_behavior_t, data: uint64_t)
     -> memcached_return_t;
    pub fn memcached_behavior_get(ptr: *mut memcached_st,
                                  flag: memcached_behavior_t) -> uint64_t;
    pub fn memcached_behavior_set_distribution(ptr: *mut memcached_st,
                                               _type:
                                                   memcached_server_distribution_t)
     -> memcached_return_t;
    pub fn memcached_behavior_get_distribution(ptr: *mut memcached_st)
     -> memcached_server_distribution_t;
    pub fn memcached_behavior_set_key_hash(ptr: *mut memcached_st,
                                           _type: memcached_hash_t)
     -> memcached_return_t;
    pub fn memcached_behavior_get_key_hash(ptr: *mut memcached_st)
     -> memcached_hash_t;
    pub fn memcached_behavior_set_distribution_hash(ptr: *mut memcached_st,
                                                    _type: memcached_hash_t)
     -> memcached_return_t;
    pub fn memcached_behavior_get_distribution_hash(ptr: *mut memcached_st)
     -> memcached_hash_t;
    pub fn libmemcached_string_behavior(flag: memcached_behavior_t)
     -> *const ::std::os::raw::c_char;
    pub fn libmemcached_string_distribution(flag:
                                                memcached_server_distribution_t)
     -> *const ::std::os::raw::c_char;
    pub fn memcached_bucket_set(_self: *mut memcached_st,
                                host_map: *const uint32_t,
                                forward_map: *const uint32_t,
                                buckets: uint32_t, replicas: uint32_t)
     -> memcached_return_t;
    pub fn memcached_callback_set(ptr: *mut memcached_st,
                                  flag: memcached_callback_t,
                                  data: *const ::std::os::raw::c_void)
     -> memcached_return_t;
    pub fn memcached_callback_get(ptr: *mut memcached_st,
                                  flag: memcached_callback_t,
                                  error: *mut memcached_return_t)
     -> *mut ::std::os::raw::c_void;
    pub fn memcached_delete(ptr: *mut memcached_st,
                            key: *const ::std::os::raw::c_char,
                            key_length: size_t, expiration: time_t)
     -> memcached_return_t;
    pub fn memcached_delete_by_key(ptr: *mut memcached_st,
                                   group_key: *const ::std::os::raw::c_char,
                                   group_key_length: size_t,
                                   key: *const ::std::os::raw::c_char,
                                   key_length: size_t, expiration: time_t)
     -> memcached_return_t;
    pub fn memcached_dump(ptr: *mut memcached_st,
                          function: *mut memcached_dump_fn,
                          context: *mut ::std::os::raw::c_void,
                          number_of_callbacks: uint32_t)
     -> memcached_return_t;
    pub fn memcached_set_encoding_key(arg1: *mut memcached_st,
                                      str: *const ::std::os::raw::c_char,
                                      length: size_t) -> memcached_return_t;
    pub fn memcached_exist(memc: *mut memcached_st,
                           key: *const ::std::os::raw::c_char,
                           key_length: size_t) -> memcached_return_t;
    pub fn memcached_exist_by_key(memc: *mut memcached_st,
                                  group_key: *const ::std::os::raw::c_char,
                                  group_key_length: size_t,
                                  key: *const ::std::os::raw::c_char,
                                  key_length: size_t) -> memcached_return_t;
    pub fn memcached_fetch_execute(ptr: *mut memcached_st,
                                   callback: *mut memcached_execute_fn,
                                   context: *mut ::std::os::raw::c_void,
                                   number_of_callbacks: uint32_t)
     -> memcached_return_t;
    pub fn memcached_flush(ptr: *mut memcached_st, expiration: time_t)
     -> memcached_return_t;
    pub fn memcached_flush_buffers(mem: *mut memcached_st)
     -> memcached_return_t;
    pub fn memcached_get(ptr: *mut memcached_st,
                         key: *const ::std::os::raw::c_char,
                         key_length: size_t, value_length: *mut size_t,
                         flags: *mut uint32_t, error: *mut memcached_return_t)
     -> *mut ::std::os::raw::c_char;
    pub fn memcached_mget(ptr: *mut memcached_st,
                          keys: *const *const ::std::os::raw::c_char,
                          key_length: *const size_t, number_of_keys: size_t)
     -> memcached_return_t;
    pub fn memcached_get_by_key(ptr: *mut memcached_st,
                                group_key: *const ::std::os::raw::c_char,
                                group_key_length: size_t,
                                key: *const ::std::os::raw::c_char,
                                key_length: size_t, value_length: *mut size_t,
                                flags: *mut uint32_t,
                                error: *mut memcached_return_t)
     -> *mut ::std::os::raw::c_char;
    pub fn memcached_mget_by_key(ptr: *mut memcached_st,
                                 group_key: *const ::std::os::raw::c_char,
                                 group_key_length: size_t,
                                 keys: *const *const ::std::os::raw::c_char,
                                 key_length: *const size_t,
                                 number_of_keys: size_t)
     -> memcached_return_t;
    pub fn memcached_fetch(ptr: *mut memcached_st,
                           key: *mut ::std::os::raw::c_char,
                           key_length: *mut size_t, value_length: *mut size_t,
                           flags: *mut uint32_t,
                           error: *mut memcached_return_t)
     -> *mut ::std::os::raw::c_char;
    pub fn memcached_fetch_result(ptr: *mut memcached_st,
                                  result: *mut memcached_result_st,
                                  error: *mut memcached_return_t)
     -> *mut memcached_result_st;
    pub fn memcached_mget_execute(ptr: *mut memcached_st,
                                  keys: *const *const ::std::os::raw::c_char,
                                  key_length: *const size_t,
                                  number_of_keys: size_t,
                                  callback: *mut memcached_execute_fn,
                                  context: *mut ::std::os::raw::c_void,
                                  number_of_callbacks: uint32_t)
     -> memcached_return_t;
    pub fn memcached_mget_execute_by_key(ptr: *mut memcached_st,
                                         group_key:
                                             *const ::std::os::raw::c_char,
                                         group_key_length: size_t,
                                         keys:
                                             *const *const ::std::os::raw::c_char,
                                         key_length: *const size_t,
                                         number_of_keys: size_t,
                                         callback: *mut memcached_execute_fn,
                                         context: *mut ::std::os::raw::c_void,
                                         number_of_callbacks: uint32_t)
     -> memcached_return_t;
    pub fn memcached_generate_hash_value(key: *const ::std::os::raw::c_char,
                                         key_length: size_t,
                                         hash_algorithm: memcached_hash_t)
     -> uint32_t;
    pub fn memcached_get_hashkit(ptr: *const memcached_st)
     -> *const hashkit_st;
    pub fn memcached_set_hashkit(ptr: *mut memcached_st,
                                 hashk: *mut hashkit_st)
     -> memcached_return_t;
    pub fn memcached_generate_hash(ptr: *const memcached_st,
                                   key: *const ::std::os::raw::c_char,
                                   key_length: size_t) -> uint32_t;
    pub fn memcached_autoeject(ptr: *mut memcached_st);
    pub fn libmemcached_string_hash(_type: memcached_hash_t)
     -> *const ::std::os::raw::c_char;
    pub fn libmemcached_check_configuration(option_string:
                                                *const ::std::os::raw::c_char,
                                            length: size_t,
                                            error_buffer:
                                                *mut ::std::os::raw::c_char,
                                            error_buffer_size: size_t)
     -> memcached_return_t;
    pub fn memcached_servers_parse(server_strings:
                                       *const ::std::os::raw::c_char)
     -> memcached_server_list_st;
    pub fn memcached_quit(ptr: *mut memcached_st);
    pub fn memcached_result_free(result: *mut memcached_result_st);
    pub fn memcached_result_reset(ptr: *mut memcached_result_st);
    pub fn memcached_result_create(ptr: *const memcached_st,
                                   result: *mut memcached_result_st)
     -> *mut memcached_result_st;
    pub fn memcached_result_key_value(_self: *const memcached_result_st)
     -> *const ::std::os::raw::c_char;
    pub fn memcached_result_key_length(_self: *const memcached_result_st)
     -> size_t;
    pub fn memcached_result_value(_self: *const memcached_result_st)
     -> *const ::std::os::raw::c_char;
    pub fn memcached_result_take_value(_self: *mut memcached_result_st)
     -> *mut ::std::os::raw::c_char;
    pub fn memcached_result_length(_self: *const memcached_result_st)
     -> size_t;
    pub fn memcached_result_flags(_self: *const memcached_result_st)
     -> uint32_t;
    pub fn memcached_result_cas(_self: *const memcached_result_st)
     -> uint64_t;
    pub fn memcached_result_set_value(ptr: *mut memcached_result_st,
                                      value: *const ::std::os::raw::c_char,
                                      length: size_t) -> memcached_return_t;
    pub fn memcached_result_set_flags(_self: *mut memcached_result_st,
                                      flags: uint32_t);
    pub fn memcached_result_set_expiration(_self: *mut memcached_result_st,
                                           expiration: time_t);
    pub fn memcached_server_cursor(ptr: *const memcached_st,
                                   callback: *const memcached_server_fn,
                                   context: *mut ::std::os::raw::c_void,
                                   number_of_callbacks: uint32_t)
     -> memcached_return_t;
    pub fn memcached_server_by_key(ptr: *mut memcached_st,
                                   key: *const ::std::os::raw::c_char,
                                   key_length: size_t,
                                   error: *mut memcached_return_t)
     -> *const memcached_instance_st;
    pub fn memcached_server_error_reset(ptr: *mut memcached_server_st);
    pub fn memcached_server_free(ptr: *mut memcached_server_st);
    pub fn memcached_server_get_last_disconnect(ptr: *const memcached_st)
     -> *const memcached_instance_st;
    pub fn memcached_server_add_udp(ptr: *mut memcached_st,
                                    hostname: *const ::std::os::raw::c_char,
                                    port: in_port_t) -> memcached_return_t;
    pub fn memcached_server_add_unix_socket(ptr: *mut memcached_st,
                                            filename:
                                                *const ::std::os::raw::c_char)
     -> memcached_return_t;
    pub fn memcached_server_add(ptr: *mut memcached_st,
                                hostname: *const ::std::os::raw::c_char,
                                port: in_port_t) -> memcached_return_t;
    pub fn memcached_server_add_udp_with_weight(ptr: *mut memcached_st,
                                                hostname:
                                                    *const ::std::os::raw::c_char,
                                                port: in_port_t,
                                                weight: uint32_t)
     -> memcached_return_t;
    pub fn memcached_server_add_unix_socket_with_weight(ptr:
                                                            *mut memcached_st,
                                                        filename:
                                                            *const ::std::os::raw::c_char,
                                                        weight: uint32_t)
     -> memcached_return_t;
    pub fn memcached_server_add_with_weight(ptr: *mut memcached_st,
                                            hostname:
                                                *const ::std::os::raw::c_char,
                                            port: in_port_t, weight: uint32_t)
     -> memcached_return_t;
    pub fn memcached_server_response_count(_self:
                                               *const memcached_instance_st)
     -> uint32_t;
    pub fn memcached_server_name(_self: *const memcached_instance_st)
     -> *const ::std::os::raw::c_char;
    pub fn memcached_server_port(_self: *const memcached_instance_st)
     -> in_port_t;
    pub fn memcached_server_srcport(_self: *const memcached_instance_st)
     -> in_port_t;
    pub fn memcached_instance_next_retry(_self: *const memcached_instance_st,
                                         absolute_time: time_t);
    pub fn memcached_server_type(ptr: *const memcached_instance_st)
     -> *const ::std::os::raw::c_char;
    pub fn memcached_server_major_version(ptr: *const memcached_instance_st)
     -> uint8_t;
    pub fn memcached_server_minor_version(ptr: *const memcached_instance_st)
     -> uint8_t;
    pub fn memcached_server_micro_version(ptr: *const memcached_instance_st)
     -> uint8_t;
    pub fn memcached_server_list_free(ptr: memcached_server_list_st);
    pub fn memcached_server_push(ptr: *mut memcached_st,
                                 list: memcached_server_list_st)
     -> memcached_return_t;
    pub fn memcached_server_list_append(ptr: memcached_server_list_st,
                                        hostname:
                                            *const ::std::os::raw::c_char,
                                        port: in_port_t,
                                        error: *mut memcached_return_t)
     -> memcached_server_list_st;
    pub fn memcached_server_list_append_with_weight(ptr:
                                                        memcached_server_list_st,
                                                    hostname:
                                                        *const ::std::os::raw::c_char,
                                                    port: in_port_t,
                                                    weight: uint32_t,
                                                    error:
                                                        *mut memcached_return_t)
     -> memcached_server_list_st;
    pub fn memcached_server_list_count(ptr: memcached_server_list_st)
     -> uint32_t;
    pub fn memcached_set(ptr: *mut memcached_st,
                         key: *const ::std::os::raw::c_char,
                         key_length: size_t,
                         value: *const ::std::os::raw::c_char,
                         value_length: size_t, expiration: time_t,
                         flags: uint32_t) -> memcached_return_t;
    pub fn memcached_add(ptr: *mut memcached_st,
                         key: *const ::std::os::raw::c_char,
                         key_length: size_t,
                         value: *const ::std::os::raw::c_char,
                         value_length: size_t, expiration: time_t,
                         flags: uint32_t) -> memcached_return_t;
    pub fn memcached_replace(ptr: *mut memcached_st,
                             key: *const ::std::os::raw::c_char,
                             key_length: size_t,
                             value: *const ::std::os::raw::c_char,
                             value_length: size_t, expiration: time_t,
                             flags: uint32_t) -> memcached_return_t;
    pub fn memcached_append(ptr: *mut memcached_st,
                            key: *const ::std::os::raw::c_char,
                            key_length: size_t,
                            value: *const ::std::os::raw::c_char,
                            value_length: size_t, expiration: time_t,
                            flags: uint32_t) -> memcached_return_t;
    pub fn memcached_prepend(ptr: *mut memcached_st,
                             key: *const ::std::os::raw::c_char,
                             key_length: size_t,
                             value: *const ::std::os::raw::c_char,
                             value_length: size_t, expiration: time_t,
                             flags: uint32_t) -> memcached_return_t;
    pub fn memcached_cas(ptr: *mut memcached_st,
                         key: *const ::std::os::raw::c_char,
                         key_length: size_t,
                         value: *const ::std::os::raw::c_char,
                         value_length: size_t, expiration: time_t,
                         flags: uint32_t, cas: uint64_t)
     -> memcached_return_t;
    pub fn memcached_set_by_key(ptr: *mut memcached_st,
                                group_key: *const ::std::os::raw::c_char,
                                group_key_length: size_t,
                                key: *const ::std::os::raw::c_char,
                                key_length: size_t,
                                value: *const ::std::os::raw::c_char,
                                value_length: size_t, expiration: time_t,
                                flags: uint32_t) -> memcached_return_t;
    pub fn memcached_add_by_key(ptr: *mut memcached_st,
                                group_key: *const ::std::os::raw::c_char,
                                group_key_length: size_t,
                                key: *const ::std::os::raw::c_char,
                                key_length: size_t,
                                value: *const ::std::os::raw::c_char,
                                value_length: size_t, expiration: time_t,
                                flags: uint32_t) -> memcached_return_t;
    pub fn memcached_replace_by_key(ptr: *mut memcached_st,
                                    group_key: *const ::std::os::raw::c_char,
                                    group_key_length: size_t,
                                    key: *const ::std::os::raw::c_char,
                                    key_length: size_t,
                                    value: *const ::std::os::raw::c_char,
                                    value_length: size_t, expiration: time_t,
                                    flags: uint32_t) -> memcached_return_t;
    pub fn memcached_prepend_by_key(ptr: *mut memcached_st,
                                    group_key: *const ::std::os::raw::c_char,
                                    group_key_length: size_t,
                                    key: *const ::std::os::raw::c_char,
                                    key_length: size_t,
                                    value: *const ::std::os::raw::c_char,
                                    value_length: size_t, expiration: time_t,
                                    flags: uint32_t) -> memcached_return_t;
    pub fn memcached_append_by_key(ptr: *mut memcached_st,
                                   group_key: *const ::std::os::raw::c_char,
                                   group_key_length: size_t,
                                   key: *const ::std::os::raw::c_char,
                                   key_length: size_t,
                                   value: *const ::std::os::raw::c_char,
                                   value_length: size_t, expiration: time_t,
                                   flags: uint32_t) -> memcached_return_t;
    pub fn memcached_cas_by_key(ptr: *mut memcached_st,
                                group_key: *const ::std::os::raw::c_char,
                                group_key_length: size_t,
                                key: *const ::std::os::raw::c_char,
                                key_length: size_t,
                                value: *const ::std::os::raw::c_char,
                                value_length: size_t, expiration: time_t,
                                flags: uint32_t, cas: uint64_t)
     -> memcached_return_t;
    pub fn memcached_strerror(ptr: *const memcached_st,
                              rc: memcached_return_t)
     -> *const ::std::os::raw::c_char;
    pub fn memcached_touch(ptr: *mut memcached_st,
                           key: *const ::std::os::raw::c_char,
                           key_length: size_t, expiration: time_t)
     -> memcached_return_t;
    pub fn memcached_touch_by_key(ptr: *mut memcached_st,
                                  group_key: *const ::std::os::raw::c_char,
                                  group_key_length: size_t,
                                  key: *const ::std::os::raw::c_char,
                                  key_length: size_t, expiration: time_t)
     -> memcached_return_t;
    pub fn memcached_verbosity(ptr: *mut memcached_st, verbosity: uint32_t)
     -> memcached_return_t;
    pub fn memcached_version(ptr: *mut memcached_st) -> memcached_return_t;
    pub fn memcached_lib_version() -> *const ::std::os::raw::c_char;
    pub fn memcached_set_sasl_callbacks(ptr: *mut memcached_st,
                                        callbacks: *const sasl_callback_t);
    pub fn memcached_set_sasl_auth_data(ptr: *mut memcached_st,
                                        username:
                                            *const ::std::os::raw::c_char,
                                        password:
                                            *const ::std::os::raw::c_char)
     -> memcached_return_t;
    pub fn memcached_destroy_sasl_auth_data(ptr: *mut memcached_st)
     -> memcached_return_t;
    pub fn memcached_get_sasl_callbacks(ptr: *mut memcached_st)
     -> *mut sasl_callback_t;
    pub fn memcached_servers_reset(ptr: *mut memcached_st);
    pub fn memcached_create(ptr: *mut memcached_st) -> *mut memcached_st;
    pub fn memcached(string: *const ::std::os::raw::c_char,
                     string_length: size_t) -> *mut memcached_st;
    pub fn memcached_free(ptr: *mut memcached_st);
    pub fn memcached_reset(ptr: *mut memcached_st) -> memcached_return_t;
    pub fn memcached_reset_last_disconnected_server(ptr: *mut memcached_st);
    pub fn memcached_clone(clone: *mut memcached_st, ptr: *const memcached_st)
     -> *mut memcached_st;
    pub fn memcached_get_user_data(ptr: *const memcached_st)
     -> *mut ::std::os::raw::c_void;
    pub fn memcached_set_user_data(ptr: *mut memcached_st,
                                   data: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_void;
    pub fn memcached_push(destination: *mut memcached_st,
                          source: *const memcached_st) -> memcached_return_t;
    pub fn memcached_server_instance_by_position(ptr: *const memcached_st,
                                                 server_key: uint32_t)
     -> *const memcached_instance_st;
    pub fn memcached_server_count(arg1: *const memcached_st) -> uint32_t;
    pub fn memcached_query_id(arg1: *const memcached_st) -> uint64_t;
}
